package org.myprojects.kafka.producer;
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2589218054073527545L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroOrder\",\"fields\":[{\"name\":\"orderId\",\"type\":\"int\"},{\"name\":\"customerId\",\"type\":[\"int\",\"null\"]},{\"name\":\"customerEmailId\",\"type\":[\"string\",\"null\"]},{\"name\":\"itemDesc\",\"type\":[\"string\",\"null\"]},{\"name\":\"price\",\"type\":[\"int\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroOrder> ENCODER =
      new BinaryMessageEncoder<AvroOrder>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroOrder> DECODER =
      new BinaryMessageDecoder<AvroOrder>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroOrder> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroOrder> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroOrder>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroOrder to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroOrder from a ByteBuffer. */
  public static AvroOrder fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int orderId;
  @Deprecated public java.lang.Integer customerId;
  @Deprecated public java.lang.CharSequence customerEmailId;
  @Deprecated public java.lang.CharSequence itemDesc;
  @Deprecated public java.lang.Integer price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroOrder() {}

  /**
   * All-args constructor.
   * @param orderId The new value for orderId
   * @param customerId The new value for customerId
   * @param customerEmailId The new value for customerEmailId
   * @param itemDesc The new value for itemDesc
   * @param price The new value for price
   */
  public AvroOrder(java.lang.Integer orderId, java.lang.Integer customerId, java.lang.CharSequence customerEmailId, java.lang.CharSequence itemDesc, java.lang.Integer price) {
    this.orderId = orderId;
    this.customerId = customerId;
    this.customerEmailId = customerEmailId;
    this.itemDesc = itemDesc;
    this.price = price;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return customerId;
    case 2: return customerEmailId;
    case 3: return itemDesc;
    case 4: return price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.Integer)value$; break;
    case 1: customerId = (java.lang.Integer)value$; break;
    case 2: customerEmailId = (java.lang.CharSequence)value$; break;
    case 3: itemDesc = (java.lang.CharSequence)value$; break;
    case 4: price = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.Integer getOrderId() {
    return orderId;
  }

  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.Integer value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.Integer getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.Integer value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'customerEmailId' field.
   * @return The value of the 'customerEmailId' field.
   */
  public java.lang.CharSequence getCustomerEmailId() {
    return customerEmailId;
  }

  /**
   * Sets the value of the 'customerEmailId' field.
   * @param value the value to set.
   */
  public void setCustomerEmailId(java.lang.CharSequence value) {
    this.customerEmailId = value;
  }

  /**
   * Gets the value of the 'itemDesc' field.
   * @return The value of the 'itemDesc' field.
   */
  public java.lang.CharSequence getItemDesc() {
    return itemDesc;
  }

  /**
   * Sets the value of the 'itemDesc' field.
   * @param value the value to set.
   */
  public void setItemDesc(java.lang.CharSequence value) {
    this.itemDesc = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Integer getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Integer value) {
    this.price = value;
  }

  /**
   * Creates a new AvroOrder RecordBuilder.
   * @return A new AvroOrder RecordBuilder
   */
  public static AvroOrder.Builder newBuilder() {
    return new AvroOrder.Builder();
  }

  /**
   * Creates a new AvroOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroOrder RecordBuilder
   */
  public static AvroOrder.Builder newBuilder(AvroOrder.Builder other) {
    return new AvroOrder.Builder(other);
  }

  /**
   * Creates a new AvroOrder RecordBuilder by copying an existing AvroOrder instance.
   * @param other The existing instance to copy.
   * @return A new AvroOrder RecordBuilder
   */
  public static AvroOrder.Builder newBuilder(AvroOrder other) {
    return new AvroOrder.Builder(other);
  }

  /**
   * RecordBuilder for AvroOrder instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroOrder>
    implements org.apache.avro.data.RecordBuilder<AvroOrder> {

    private int orderId;
    private java.lang.Integer customerId;
    private java.lang.CharSequence customerEmailId;
    private java.lang.CharSequence itemDesc;
    private java.lang.Integer price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AvroOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerEmailId)) {
        this.customerEmailId = data().deepCopy(fields()[2].schema(), other.customerEmailId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.itemDesc)) {
        this.itemDesc = data().deepCopy(fields()[3].schema(), other.itemDesc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroOrder other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerEmailId)) {
        this.customerEmailId = data().deepCopy(fields()[2].schema(), other.customerEmailId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.itemDesc)) {
        this.itemDesc = data().deepCopy(fields()[3].schema(), other.itemDesc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.Integer getOrderId() {
      return orderId;
    }

    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public AvroOrder.Builder setOrderId(int value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public AvroOrder.Builder clearOrderId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.Integer getCustomerId() {
      return customerId;
    }

    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public AvroOrder.Builder setCustomerId(java.lang.Integer value) {
      validate(fields()[1], value);
      this.customerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public AvroOrder.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerEmailId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerEmailId() {
      return customerEmailId;
    }

    /**
      * Sets the value of the 'customerEmailId' field.
      * @param value The value of 'customerEmailId'.
      * @return This builder.
      */
    public AvroOrder.Builder setCustomerEmailId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.customerEmailId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customerEmailId' field has been set.
      * @return True if the 'customerEmailId' field has been set, false otherwise.
      */
    public boolean hasCustomerEmailId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customerEmailId' field.
      * @return This builder.
      */
    public AvroOrder.Builder clearCustomerEmailId() {
      customerEmailId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemDesc' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemDesc() {
      return itemDesc;
    }

    /**
      * Sets the value of the 'itemDesc' field.
      * @param value The value of 'itemDesc'.
      * @return This builder.
      */
    public AvroOrder.Builder setItemDesc(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.itemDesc = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'itemDesc' field has been set.
      * @return True if the 'itemDesc' field has been set, false otherwise.
      */
    public boolean hasItemDesc() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'itemDesc' field.
      * @return This builder.
      */
    public AvroOrder.Builder clearItemDesc() {
      itemDesc = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Integer getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public AvroOrder.Builder setPrice(java.lang.Integer value) {
      validate(fields()[4], value);
      this.price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public AvroOrder.Builder clearPrice() {
      price = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroOrder build() {
      try {
        AvroOrder record = new AvroOrder();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.Integer) defaultValue(fields()[0]);
        record.customerId = fieldSetFlags()[1] ? this.customerId : (java.lang.Integer) defaultValue(fields()[1]);
        record.customerEmailId = fieldSetFlags()[2] ? this.customerEmailId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.itemDesc = fieldSetFlags()[3] ? this.itemDesc : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.price = fieldSetFlags()[4] ? this.price : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroOrder>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroOrder>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroOrder>
    READER$ = (org.apache.avro.io.DatumReader<AvroOrder>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
